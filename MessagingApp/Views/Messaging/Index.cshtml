@model IEnumerable<MessagingApp.Models.Message>
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var userNames = ViewBag.UserNames as Dictionary<int, string>;
    int loggedInUserId = int.Parse(User.FindFirst("UserId").Value);
    string loggedInUserName = User.Identity.Name;
    string studentName = ViewBag.StudentName as string;
    int conversationId = (int)ViewBag.ConversationId;
    ViewData["Title"] = "Messaging"; // for layout title

    // --- Name helpers: mirror _Layout logic + email fallback to "First Last" ---
    string? nameDisplay = User.FindFirst("name")?.Value;
    string? nameClaim = User.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value;
    string? given = User.FindFirst(System.Security.Claims.ClaimTypes.GivenName)?.Value;
    string? surname = User.FindFirst(System.Security.Claims.ClaimTypes.Surname)?.Value;
    string? preferredUser = User.FindFirst("preferred_username")?.Value;

    string fullName = (nameDisplay
                       ?? nameClaim
                       ?? $"{(given ?? "").Trim()} {(surname ?? "").Trim()}".Trim()
                       ?? preferredUser
                       ?? (User.Identity?.Name ?? "Account"))
                      .Trim();

    string FirstCap(string s) => string.IsNullOrEmpty(s)
        ? s
        : char.ToUpperInvariant(s[0]) + (s.Length > 1 ? s.Substring(1).ToLowerInvariant() : "");

    string ToFirstLast(string raw)
    {
        if (string.IsNullOrWhiteSpace(raw)) return "Unknown";
        // If it already looks like "First Last" (has a space and no '@'), use it
        if (raw.Contains(' ') && !raw.Contains("@")) return raw.Trim();

        // If it looks like an email, derive "First Last" from the local-part
        var atIdx = raw.IndexOf('@');
        var stem = atIdx > 0 ? raw.Substring(0, atIdx) : raw;

        // Replace common separators with spaces, collapse whitespace
        stem = stem.Replace('.', ' ').Replace('_', ' ').Replace('-', ' ');
        stem = System.Text.RegularExpressions.Regex.Replace(stem, "\\s+", " ").Trim();

        var tokens = stem.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (tokens.Length == 0) return raw.Trim();
        if (tokens.Length == 1) return FirstCap(tokens[0]);

        return $"{FirstCap(tokens[0])} {FirstCap(tokens[^1])}";
    }

    // Display names for others; "You" will be used for the logged-in user in the UI
    var displayNames = userNames?.ToDictionary(kv => kv.Key, kv => ToFirstLast(kv.Value))
                       ?? new Dictionary<int, string>();

    // Header should also show a nice human name
    string displayStudentName = ToFirstLast(studentName ?? "");
}

@section Styles {
    <link rel="stylesheet"
          href="~/css/mobile.css"
          asp-append-version="true"
          media="(max-width: 800px)" />

    <!-- Offcanvas safety overrides so the partial works inside the drawer on mobile.
         I did not edit the partial; these rules neutralize its fixed layout & display toggles. -->
    <style>
        @@media (max-width: 800px) {
            #convoDrawer .conversation-list-container, .offcanvas .conversation-list-container {
                display: block !important;
                position: static !important;
                width: 100% !important;
                left: auto !important;
                top: auto !important;
                bottom: auto !important;
                border-right: 0 !important;
                padding: 12px !important;
                background: #fff !important;
                z-index: auto !important;
            }

            #convoDrawer .conversation-widget,
            .offcanvas .conversation-widget {
                display: none !important;
            }
        }
    </style>
}

<!-- Mobile: hamburger to open conversation drawer -->
<button type="button"
        class="btn btn-outline-secondary d-inline d-md-none position-fixed top-0 start-0 m-2 z-3"
        data-bs-toggle="offcanvas"
        data-bs-target="#convoDrawer"
        aria-controls="convoDrawer"
        aria-label="Open conversations">
    <i class="bi bi-list"></i> @* uses Bootstrap Icons already in _Layout *@
</button>

<!-- Offcanvas (mobile conversation list) -->
<div class="offcanvas offcanvas-start" tabindex="-1" id="convoDrawer" aria-labelledby="convoDrawerLabel" data-bs-scroll="true">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="convoDrawerLabel">Conversations</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body p-0" id="convoDrawerBody">
    </div>
</div>

<div id="messagingRoot">
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar for Active Conversations -->
            <div class="col-md-3" id="desktopConversationList">
                <div id="conversationListRoot" class="conversation-list-container">
                    @Html.Partial("_ConversationList")
                </div>
            </div>


            <!-- Main Messaging Panel -->
            <div class="col-md-9">
                <div class="message-container">
                    <h2 class="message-header-title">Messaging with @displayStudentName</h2>

                    <div class="message-list" id="messageList">
                        @{
                            var lastSentMessageId = Model
                            .Where(m => m.SenderId == loggedInUserId)
                            .OrderByDescending(m => m.CreatedTimestamp)
                            .Select(m => m.Id)
                            .FirstOrDefault();
                        }

                        @if (Model != null && Model.Any())
                        {
                            foreach (var message in Model.Reverse())
                            {
                                bool isSentByUser = message.SenderId == loggedInUserId;
                                bool hasAttachment = !string.IsNullOrEmpty(message.AttachmentUrl);
                                string ext = hasAttachment
                                ? System.IO.Path.GetExtension(message.AttachmentUrl).ToLowerInvariant()
                                : null;
                                var imgExts = new[] { ".png", ".jpg", ".jpeg", ".gif" };

                                <div class="message-wrapper @(isSentByUser ? "sent" : "received") @(hasAttachment && string.IsNullOrWhiteSpace(message.Content) ? "file-only" : "")"
                                     data-message-id="@message.Id">
                                    <div class="message-header">
                                        <small class="message-info">
                                            @(isSentByUser
                                                                                ? "You"
                                                                                : (displayNames.ContainsKey(message.SenderId)
                                                                                ? displayNames[message.SenderId]
                                                                                : "Unknown"))
                                                                                             - @message.Timestamp.ToShortTimeString()
                                                                                             @Html.Raw(message.IsEdited
                                                                                ? " <span class=\"edited-label\">(edited)</span>"
                                                                                : "")
                                </small>
                                @if (isSentByUser)
                                        {
                                            <div class="message-actions">
                                                <i class="fas fa-edit edit-icon" title="Edit"></i>
                                                <i class="fas fa-trash delete-icon" title="Delete"></i>
                                            </div>
                                        }
                                    </div>

                                    <div class="message @(isSentByUser ? "sent-message" : "received-message")">
                                        @message.Content

                                        @if (hasAttachment)
                                        {
                                            <div class="attachment mt-2">
                                                @if (imgExts.Contains(ext))
                                                {
                                                    <a href="@message.AttachmentUrl" target="_blank">
                                                        <img src="@message.AttachmentUrl" class="attachment-thumb" />
                                                    </a>
                                                }
                                                else
                                                {
                                                    <a href="@message.AttachmentUrl" target="_blank">
                                                        <i class="fas fa-paperclip"></i>
                                                        @System.IO.Path.GetFileName(message.AttachmentUrl)
                                                    </a>
                                                }
                                            </div>
                                        }
                                    </div>

                                    @if (isSentByUser && message.Id == lastSentMessageId)
                                    {
                                        <div class="message-checkmark">
                                            <i class="fas fa-check-circle"></i>
                                        </div>
                                        @if (message.IsRead && message.ReadTime.HasValue)
                                        {
                                            <div class="read-receipt">
                                                Read @message.ReadTime.Value.ToShortTimeString()
                                            </div>
                                        }
                                    }
                                </div>
                            }
                        }
                        else
                        {
                            <p>No messages available.</p>
                        }
                    </div>

                    <!-- Message Input Form -->
                    <form class="add-message-form" id="messageForm" method="post"
                          asp-action="AddMessage" asp-controller="Messaging"
                          enctype="multipart/form-data">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="studentId" value="@ViewBag.StudentId" />
                        <input type="hidden" name="studentName" value="@displayStudentName" />
                        <input type="hidden" name="conversationId" value="@conversationId" />

                        <textarea name="content" id="contentInput" class="message-textarea"
                                  placeholder="Type your message here..."></textarea>

                        <div id="filePreview" class="file-preview mt-2"></div>

                        <div class="d-flex align-items-center mt-2">
                            <button type="button" class="btn btn-light me-2"
                                    onclick="document.getElementById('fileInput').click();">
                                <i class="fas fa-paperclip"></i>
                            </button>
                            <input type="file" id="fileInput" name="attachment" hidden accept=".pdf,image/*" />

                            <button type="submit" class="send-btn ms-auto">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>
                        <!-- Upload progress & status -->
                        <div class="mt-2" id="uploadUi" hidden>
                            <progress id="uploadProgress" max="100" value="0" style="width:260px;"></progress>
                            <span id="uploadPercent" class="text-muted ms-2">0%</span>
                            <span id="uploadStatus" class="text-muted ms-2">Preparing…</span>
                            <button type="button" id="uploadRetry" class="btn btn-sm btn-outline-danger ms-2" hidden>Retry</button>
                        </div>


                    </form>
                </div>
                <!-- Confirm Delete Modal -->
                <div class="modal-overlay" id="confirmModal">
                    <div class="modal-content">
                        <h2>Confirm Deletion</h2>
                        <p>Are you sure you want to delete this message?</p>
                        <button class="btn-confirm" id="confirmDeleteBtn">Yes, Delete</button>
                        <button class="btn-cancel" id="cancelDeleteBtn">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Floating error toast (bottom-right) -->
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1080;">
    <div id="uploadToast" class="toast align-items-center text-bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body" id="uploadToastBody">Something went wrong.</div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>


@section Scripts {
    <!-- SignalR and Icons -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="~/js/mobile.js" asp-append-version="true" defer></script>



    <script>
        window.loggedInUserId = @loggedInUserId;
        let pendingDeleteMessageId = null;

        window.onload = () =>
            document.getElementById("messageList").scrollTop = 0;

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        connection.start().then(() => {
            connection.invoke("JoinConversation", @conversationId);
            connection.invoke("MarkMessagesAsRead", @loggedInUserId, @conversationId);
        });

        // Helper: turn an email-like string into "First Last" if needed
        function parseDisplayName(name) {
            if (!name) return "Unknown";
            if (name.indexOf('@@') === -1 && name.indexOf(' ') !== -1) return name.trim();
            let stem = name.split('@@')[0] || name;
            stem = stem.replace(/[._-]/g, ' ').replace(/\s+/g, ' ').trim();
            if (!stem) return name.trim();
            const parts = stem.split(' ').filter(Boolean);
            const cap = s => s ? (s[0].toUpperCase() + s.slice(1).toLowerCase()) : s;
            if (parts.length === 1) return cap(parts[0]);
            return cap(parts[0]) + ' ' + cap(parts[parts.length - 1]);
        }

        connection.on("ReceiveMessage", (senderId, senderName, message, timestamp, messageId, attachmentUrl) => {
            const messageList = document.getElementById("messageList");
            messageList.querySelector("p")?.remove();

            const isSentByUser = senderId == @loggedInUserId;
            const showName = isSentByUser ? "You" : parseDisplayName(senderName || "");

            const wrapper = document.createElement("div");
            wrapper.className = "message-wrapper " + (isSentByUser ? "sent" : "received");
            wrapper.setAttribute("data-message-id", messageId);

            if (!message.trim() && attachmentUrl) {
                wrapper.classList.add("file-only");
            }

            let header = `<div class="message-header">
                                <small class="message-info">${showName} - ${timestamp}</small>`;
            if (isSentByUser) {
                header += `<div class="message-actions">
                                    <i class="fas fa-edit edit-icon" title="Edit"></i>
                                    <i class="fas fa-trash delete-icon" title="Delete"></i>
                                </div>`;
            }
            header += `</div>`;

            let body = `<div class="message ${isSentByUser ? "sent-message" : "received-message"}">${message}`;
            if (attachmentUrl) {
                const ext = attachmentUrl.split('.').pop().toLowerCase();
                const imgExts = ["png", "jpg", "jpeg", "gif"];
                if (imgExts.includes(ext)) {
                    body += `<div class="attachment mt-2">
                                        <a href="${attachmentUrl}" target="_blank">
                                            <img src="${attachmentUrl}" class="attachment-thumb" />
                                        </a>
                                    </div>`;
                } else {
                    const name = attachmentUrl.split('/').pop();
                    body += `<div class="attachment mt-2">
                                        <a href="${attachmentUrl}" target="_blank">
                                            <i class="fas fa-paperclip"></i> ${name}
                                        </a>
                                    </div>`;
                }
            }
            body += `</div>`;

            wrapper.innerHTML = header + body;
            messageList.insertBefore(wrapper, messageList.firstChild);
            setTimeout(() => messageList.scrollTop = 0, 10);

            if (!isSentByUser) {
                connection.invoke("MarkMessagesAsRead", @loggedInUserId, @conversationId)
                    .catch(err => console.error(err));
            } else {
                document.querySelectorAll(".message-checkmark").forEach(el => el.remove());
                const check = document.createElement("div");
                check.className = "message-checkmark";
                check.innerHTML = '<i class="fas fa-check-circle"></i>';
                wrapper.querySelector(".sent-message")
                    .parentNode.insertBefore(check, wrapper.querySelector(".sent-message").nextSibling);
            }
        });

        document.getElementById("fileInput").addEventListener("change", function () {
            const preview = document.getElementById("filePreview");
            preview.innerHTML = "";
            const file = this.files[0];
            if (!file) return;
            const allowed = ["pdf", "png", "jpg", "jpeg", "gif"];
            const ext = file.name.split('.').pop().toLowerCase();
            if (!allowed.includes(ext)) {
                alert("Unsupported file type. Please select PDF or an image.");
                this.value = "";
                return;
            }
            if (["png", "jpg", "jpeg", "gif", "webp"].includes(ext)) {
                const reader = new FileReader();
                reader.onload = e => {
                    const img = document.createElement("img");
                    img.src = e.target.result;
                    img.className = "preview-thumb";
                    img.onclick = () => window.open(img.src, "_blank");
                    preview.appendChild(img);
                };
                reader.readAsDataURL(file);
            } else {
                const nameDiv = document.createElement("div");
                nameDiv.textContent = file.name;
                nameDiv.className = "preview-filename";
                preview.appendChild(nameDiv);
            }
        });

        (function () {
          const form       = document.getElementById('messageForm');
          if (!form) return;

          const sendBtn    = form.querySelector('button[type="submit"]');
          const contentEl  = document.getElementById("contentInput");
          const fileEl     = document.getElementById("fileInput");
          const previewEl  = document.getElementById("filePreview");

          const uploadUi   = document.getElementById("uploadUi");
          const progressEl = document.getElementById("uploadProgress");
          const percentEl  = document.getElementById("uploadPercent");
          const statusEl   = document.getElementById("uploadStatus");
          const retryBtn   = document.getElementById("uploadRetry");

          // Toast helper
          let uploadToast;
          function showErrorToast(msg) {
            const el = document.getElementById('uploadToast');
            const body = document.getElementById('uploadToastBody');
            body.textContent = msg || 'Upload failed';
            uploadToast = uploadToast || new bootstrap.Toast(el, { delay: 4000 });
            uploadToast.show();
          }

          function resetProgressUi(hide = true) {
            progressEl.value = 0;
            percentEl.textContent = '0%';
            statusEl.textContent = 'Preparing…';
            retryBtn.hidden = true;
            if (hide) uploadUi.hidden = true;
          }

          // Allow manual retry
          retryBtn.addEventListener('click', () => {
            // Fire another submit with current inputs (file/text preserved)
            form.dispatchEvent(new Event('submit', { cancelable: true }));
          });

          form.addEventListener('submit', function (e) {
            e.preventDefault();
            cancelActiveEdits();

            const hasText = (contentEl.value || '').trim().length > 0;
            const hasFile = fileEl.files.length > 0;
            if (!hasText && !hasFile) return;

            // Reset + show progress strip
            resetProgressUi(false);
            statusEl.textContent = hasFile ? 'Uploading…' : 'Sending…';
            uploadUi.hidden = false;

            // Build payload
            const fd = new FormData(form);
            const xhr = new XMLHttpRequest();
            xhr.open('POST', form.action, true);

            // Anti-forgery
            const tokenInput = form.querySelector('input[name="__RequestVerificationToken"]');
            if (tokenInput) xhr.setRequestHeader('RequestVerificationToken', tokenInput.value);

            sendBtn.disabled = true;

            // Progress (only fires when a file is present)
            xhr.upload.onprogress = function (evt) {
              if (!evt.lengthComputable) return;
              const pct = Math.round((evt.loaded / evt.total) * 100);
              progressEl.value = pct;
              percentEl.textContent = pct + '%';
              statusEl.textContent = pct < 100 ? 'Uploading…' : 'Processing…';
            };

            xhr.onreadystatechange = function () {
              if (xhr.readyState !== 4) return;

              sendBtn.disabled = false;

              if (xhr.status >= 200 && xhr.status < 300) {
                // Success: keep strip momentarily for reassurance, then hide
                statusEl.textContent = 'Sent!';
                setTimeout(() => resetProgressUi(true), 600);

                // Only clear inputs on success
                contentEl.value = '';
                fileEl.value = '';
                if (previewEl) previewEl.innerHTML = '';
                // Bubble appears via SignalR ReceiveMessage
              } else {
                // Failure: minimal inline text + small Retry button, plus a toast for details
                statusEl.textContent = 'Failed';
                retryBtn.hidden = false;

                let msg = xhr.responseText || 'Upload failed. Check your connection and try again.';
                try {
                  const j = JSON.parse(xhr.responseText);
                  msg = j?.error || j?.message || msg;
                } catch {}

                showErrorToast(msg);
                // Keep progress strip visible so the user can press Retry; DO NOT clear inputs
              }
            };

            xhr.onerror = function () {
              sendBtn.disabled = false;
              statusEl.textContent = 'Failed';
              retryBtn.hidden = false;
              showErrorToast('Network error during upload. Please try again.');
              // Keep UI intact for retry
            };

            xhr.send(fd);
          });
        })();


        connection.on("UpdateConversations", () => {
            if (typeof updateConversations === "function") updateConversations();
        });

        function cancelActiveEdits() {
            document.querySelectorAll(".message-wrapper input[type='text']").forEach(input => {
                const pd = input.parentElement;
                pd.innerText = pd.dataset.originalText || input.value;
            });
        }

        document.getElementById("messageList").addEventListener("click", function (e) {
            const t = e.target, wrap = t.closest(".message-wrapper");
            if (!wrap) return;
            const msgId = +wrap.dataset.messageId;

            if (t.classList.contains("delete-icon")) {
                pendingDeleteMessageId = msgId;
                document.getElementById("confirmModal").style.display = "flex";
            }
            if (t.classList.contains("edit-icon")) {
                const md = wrap.querySelector(".message");
                const orig = md.innerText;
                if (md.querySelector("input")) return;
                const inp = document.createElement("input");
                inp.type = "text"; inp.value = orig; inp.style.width = "80%";
                md.dataset.originalText = orig; md.innerHTML = ""; md.appendChild(inp); inp.focus();
                let saved = false;
                function save() {
                    const v = inp.value.trim();
                    if (!v || v === orig) return cancel();
                    saved = true; inp.removeEventListener("blur", blur);
                    connection.invoke("EditMessage", msgId, v).catch(console.error);
                }
                function cancel() { md.innerText = orig; }
                function blur() { setTimeout(() => !saved && cancel(), 300); }
                inp.addEventListener("keydown", e => {
                    if (e.key === "Enter") { e.preventDefault(); save(); inp.blur(); }
                    if (e.key === "Escape") { e.preventDefault(); cancel(); }
                });
                inp.addEventListener("blur", blur);
                const ok = document.createElement("i"), no = document.createElement("i");
                ok.className = "fas fa-check"; ok.title = "Save"; ok.style.cursor = "pointer";
                no.className = "fas fa-times"; no.title = "Cancel"; no.style.cursor = "pointer";
                md.appendChild(ok); md.appendChild(no);
                ok.addEventListener("click", save);
                no.addEventListener("click", cancel);
            }
        });

        document.getElementById("confirmDeleteBtn").addEventListener("click", () => {
            if (pendingDeleteMessageId != null) {
                connection.invoke("DeleteMessage", pendingDeleteMessageId).catch(console.error);
                document.getElementById("confirmModal").style.display = "none";
                pendingDeleteMessageId = null;
            }
        });
        document.getElementById("cancelDeleteBtn").addEventListener("click", () => {
            document.getElementById("confirmModal").style.display = "none";
            pendingDeleteMessageId = null;
        });

        connection.on("MessageRead", (id, rt) => {
            document.querySelectorAll(".read-receipt").forEach(el => el.remove());
            const w = document.querySelector(`[data-message-id='${id}']`);
            if (w?.classList.contains("sent")) {
                const sm = w.querySelector(".sent-message");
                const rc = document.createElement("div");
                rc.className = "read-receipt"; rc.innerText = `Read ${rt}`;
                sm.parentNode.insertBefore(rc, sm.nextSibling);
            }
        });

                          connection.on("MessageEdited", (id, newC, ts) => {
            const w = document.querySelector(`[data-message-id='${id}']`);
            if (!w) return;

            const body = w.querySelector(".message");
            if (!body) return;

            // Preserve any attachment block
            const attachment = body.querySelector(".attachment");
            body.innerHTML = "";
            const textNode = document.createTextNode(newC);
            body.appendChild(textNode);
            if (attachment) body.appendChild(attachment);

            // Update header timestamp + edited label
            const info = w.querySelector(".message-info");
            if (info) {
                const nameOnly = info.innerText.split("-")[0].trim();
                info.innerHTML = `${nameOnly} - ${ts} <span class="edited-label">(edited)</span>`;
            }
        });

        connection.on("MessageDeleted", (id) => {
            const w = document.querySelector(`[data-message-id='${id}']`);
            if (w) {
                const ie = w.querySelector(".message-info");
                let sn = ie ? ie.innerText.split("-")[0].trim() : "User";
                w.innerHTML = `<div class="deleted-message">${sn} deleted a message</div>`;
            }
        });

        document.addEventListener("DOMContentLoaded", () => {
            document.querySelectorAll(".message-wrapper").forEach(w => {
                w.addEventListener("click", e => {
                    if (e.target.closest(".message-actions")) return;
                    document.querySelectorAll(".message-wrapper.show-actions")
                        .forEach(x => x !== w && x.classList.remove("show-actions"));
                    w.classList.toggle("show-actions");
                });
            });
        });

        window.addEventListener("focus", () => {
            connection.invoke("MarkMessagesAsRead", @loggedInUserId, @conversationId)
                .catch(console.error);
        });

        const ta = document.getElementById("contentInput");
        ta.addEventListener("input", function () {
            this.style.height = "auto";
            this.style.height = this.scrollHeight + "px";
            const lh = parseFloat(getComputedStyle(this).lineHeight);
            this.style.overflowY = this.scrollHeight > lh * 4 ? "auto" : "hidden";
        });
        document.addEventListener("DOMContentLoaded", () => {
            const t1 = document.getElementById("contentInput");
            t1.addEventListener("keydown", e => {
                if (e.key === "Enter" && !e.shiftKey) {
                    e.preventDefault();
                    document.getElementById("messageForm")
                        .dispatchEvent(new Event("submit", { cancelable: true }));
                }
            });
        });
    </script>


    <script>
        (function () {
          const desktopSidebar = document.getElementById('desktopConversationList');
          const drawerBody = document.getElementById('convoDrawerBody');
          const listRoot = document.getElementById('conversationListRoot');
          if (!desktopSidebar || !drawerBody || !listRoot) return;

          const mm = window.matchMedia('(max-width: 800px)');

          function move(isMobile) {
            if (isMobile) {
              if (!drawerBody.contains(listRoot)) drawerBody.appendChild(listRoot);
            } else {
              if (!desktopSidebar.contains(listRoot)) desktopSidebar.appendChild(listRoot);
            }
          }

          // Initial placement after DOM is ready
          if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => move(mm.matches));
          } else {
            move(mm.matches);
          }

          // React to viewport changes
          const onChange = (e) => move(e.matches);
          if (mm.addEventListener) mm.addEventListener('change', onChange);
          else mm.addListener(onChange);
        })();
    </script>

}
