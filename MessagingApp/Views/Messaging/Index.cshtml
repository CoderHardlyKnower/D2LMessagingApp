@model IEnumerable<MessagingApp.Models.Message>
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var userNames = ViewBag.UserNames as Dictionary<int, string>;
    int loggedInUserId = int.Parse(User.FindFirst("UserId").Value);
    string loggedInUserName = User.Identity.Name;
    string studentName = ViewBag.StudentName as string;
    int conversationId = (int)ViewBag.ConversationId;
    ViewData["Title"] = "Messaging"; // for layout title
}

@section Styles {
    <link rel="stylesheet"
          href="~/css/mobile.css"
          asp-append-version="true"
          media="(max-width: 800px)" />

    <!-- Offcanvas safety overrides so the partial works inside the drawer on mobile.
         I did not edit the partial; these rules neutralize its fixed layout & display toggles. -->
    <style>
        @@media (max-width: 800px) {
            #convoDrawer .conversation-list-container, .offcanvas .conversation-list-container

        {
            display: block !important;
            position: static !important;
            width: 100% !important;
            left: auto !important;
            top: auto !important;
            bottom: auto !important;
            border-right: 0 !important;
            padding: 12px !important;
            background: #fff !important;
            z-index: auto !important;
        }
        #convoDrawer .conversation-widget,
        .offcanvas .conversation-widget {
            display: none !important;
        }

        }
    </style>
}

<!-- Mobile: hamburger to open conversation drawer -->
<button type="button"
        class="btn btn-outline-secondary d-inline d-md-none position-fixed top-0 start-0 m-2 z-3"
        data-bs-toggle="offcanvas"
        data-bs-target="#convoDrawer"
        aria-controls="convoDrawer"
        aria-label="Open conversations">
    <i class="bi bi-list"></i> @* uses Bootstrap Icons already in _Layout *@
</button>

<!-- Offcanvas (mobile conversation list) -->
<div class="offcanvas offcanvas-start" tabindex="-1" id="convoDrawer" aria-labelledby="convoDrawerLabel" data-bs-scroll="true">
    <div class="offcanvas-header">
        <h5 class="offcanvas-title" id="convoDrawerLabel">Conversations</h5>
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body p-0" id="convoDrawerBody">
    </div>
</div>

<div id="messagingRoot">
<div class="container-fluid">
    <div class="row">
        <!-- Sidebar for Active Conversations -->
        <div class="col-md-3" id="desktopConversationList">
            <div id="conversationListRoot" class="conversation-list-container">
                @Html.Partial("_ConversationList")
            </div>
        </div>


        <!-- Main Messaging Panel -->
        <div class="col-md-9">
            <div class="message-container">
                <h2 class="message-header-title">Messaging with @studentName</h2>

                <div class="message-list" id="messageList">
                    @{
                        var lastSentMessageId = Model
                        .Where(m => m.SenderId == loggedInUserId)
                        .OrderByDescending(m => m.CreatedTimestamp)
                        .Select(m => m.Id)
                        .FirstOrDefault();
                    }

                    @if (Model != null && Model.Any())
                    {
                        foreach (var message in Model.Reverse())
                        {
                            bool isSentByUser = message.SenderId == loggedInUserId;
                            bool hasAttachment = !string.IsNullOrEmpty(message.AttachmentUrl);
                            string ext = hasAttachment
                            ? System.IO.Path.GetExtension(message.AttachmentUrl).ToLowerInvariant()
                            : null;
                            var imgExts = new[] { ".png", ".jpg", ".jpeg", ".gif" };

                            <div class="message-wrapper @(isSentByUser ? "sent" : "received") @(hasAttachment && string.IsNullOrWhiteSpace(message.Content) ? "file-only" : "")"
                                 data-message-id="@message.Id">
                                <div class="message-header">
                                    <small class="message-info">
                                        @(userNames.ContainsKey(message.SenderId)
                                                                        ? userNames[message.SenderId]
                                                                        : "Unknown")
                                                                                    - @message.Timestamp.ToShortTimeString()
                                                                                    @Html.Raw(message.IsEdited
                                                                        ? " <span class=\"edited-label\">(edited)</span>"
                                                                        : "")
                            </small>
                            @if (isSentByUser)
                                    {
                                        <div class="message-actions">
                                            <i class="fas fa-edit edit-icon" title="Edit"></i>
                                            <i class="fas fa-trash delete-icon" title="Delete"></i>
                                        </div>
                                    }
                                </div>

                                <div class="message @(isSentByUser ? "sent-message" : "received-message")">
                                    @message.Content

                                    @if (hasAttachment)
                                    {
                                        <div class="attachment mt-2">
                                            @if (imgExts.Contains(ext))
                                            {
                                                <a href="@message.AttachmentUrl" target="_blank">
                                                    <img src="@message.AttachmentUrl" class="attachment-thumb" />
                                                </a>
                                            }
                                            else
                                            {
                                                <a href="@message.AttachmentUrl" target="_blank">
                                                    <i class="fas fa-paperclip"></i>
                                                    @System.IO.Path.GetFileName(message.AttachmentUrl)
                                                </a>
                                            }
                                        </div>
                                    }
                                </div>

                                @if (isSentByUser && message.Id == lastSentMessageId)
                                {
                                    <div class="message-checkmark">
                                        <i class="fas fa-check-circle"></i>
                                    </div>
                                    @if (message.IsRead && message.ReadTime.HasValue)
                                    {
                                        <div class="read-receipt">
                                            Read @message.ReadTime.Value.ToShortTimeString()
                                        </div>
                                    }
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <p>No messages available.</p>
                    }
                </div>

                <!-- Message Input Form -->
                <form class="add-message-form" id="messageForm" method="post"
                      asp-action="AddMessage" asp-controller="Messaging"
                      enctype="multipart/form-data">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="studentId" value="@ViewBag.StudentId" />
                    <input type="hidden" name="studentName" value="@studentName" />
                    <input type="hidden" name="conversationId" value="@conversationId" />

                    <textarea name="content" id="contentInput" class="message-textarea"
                              placeholder="Type your message here..."></textarea>

                    <div id="filePreview" class="file-preview mt-2"></div>

                    <div class="d-flex align-items-center mt-2">
                        <button type="button" class="btn btn-light me-2"
                                onclick="document.getElementById('fileInput').click();">
                            <i class="fas fa-paperclip"></i>
                        </button>
                        <input type="file" id="fileInput" name="attachment" hidden accept=".pdf,image/*" />

                        <button type="submit" class="send-btn ms-auto">
                            <i class="fas fa-paper-plane"></i>
                        </button>
                    </div>
                </form>
                </div>
                <!-- Confirm Delete Modal -->
                <div class="modal-overlay" id="confirmModal">
                    <div class="modal-content">
                        <h2>Confirm Deletion</h2>
                        <p>Are you sure you want to delete this message?</p>
                        <button class="btn-confirm" id="confirmDeleteBtn">Yes, Delete</button>
                        <button class="btn-cancel" id="cancelDeleteBtn">Cancel</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <!-- SignalR and Icons -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="~/js/mobile.js" asp-append-version="true" defer></script>



    <script>
        window.loggedInUserId = @loggedInUserId;
        let pendingDeleteMessageId = null;

        window.onload = () =>
            document.getElementById("messageList").scrollTop = 0;

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        connection.start().then(() => {
            connection.invoke("JoinConversation", @conversationId);
            connection.invoke("MarkMessagesAsRead", @loggedInUserId, @conversationId);
        });

        connection.on("ReceiveMessage", (senderId, senderName, message, timestamp, messageId, attachmentUrl) => {
            const messageList = document.getElementById("messageList");
            messageList.querySelector("p")?.remove();

            const isSentByUser = senderId == @loggedInUserId;
            const wrapper = document.createElement("div");
            wrapper.className = "message-wrapper " + (isSentByUser ? "sent" : "received");
            wrapper.setAttribute("data-message-id", messageId);

            if (!message.trim() && attachmentUrl) {
                wrapper.classList.add("file-only");
            }

            let header = `<div class="message-header">
                                <small class="message-info">${senderName} - ${timestamp}</small>`;
            if (isSentByUser) {
                header += `<div class="message-actions">
                                    <i class="fas fa-edit edit-icon" title="Edit"></i>
                                    <i class="fas fa-trash delete-icon" title="Delete"></i>
                                </div>`;
            }
            header += `</div>`;

            let body = `<div class="message ${isSentByUser ? "sent-message" : "received-message"}">${message}`;
            if (attachmentUrl) {
                const ext = attachmentUrl.split('.').pop().toLowerCase();
                const imgExts = ["png", "jpg", "jpeg", "gif"];
                if (imgExts.includes(ext)) {
                    body += `<div class="attachment mt-2">
                                        <a href="${attachmentUrl}" target="_blank">
                                            <img src="${attachmentUrl}" class="attachment-thumb" />
                                        </a>
                                    </div>`;
                } else {
                    const name = attachmentUrl.split('/').pop();
                    body += `<div class="attachment mt-2">
                                        <a href="${attachmentUrl}" target="_blank">
                                            <i class="fas fa-paperclip"></i> ${name}
                                        </a>
                                    </div>`;
                }
            }
            body += `</div>`;

            wrapper.innerHTML = header + body;
            messageList.insertBefore(wrapper, messageList.firstChild);
            setTimeout(() => messageList.scrollTop = 0, 10);

            if (!isSentByUser) {
                connection.invoke("MarkMessagesAsRead", @loggedInUserId, @conversationId)
                    .catch(err => console.error(err));
            } else {
                document.querySelectorAll(".message-checkmark").forEach(el => el.remove());
                const check = document.createElement("div");
                check.className = "message-checkmark";
                check.innerHTML = '<i class="fas fa-check-circle"></i>';
                wrapper.querySelector(".sent-message")
                    .parentNode.insertBefore(check, wrapper.querySelector(".sent-message").nextSibling);
            }
        });

        document.getElementById("fileInput").addEventListener("change", function () {
            const preview = document.getElementById("filePreview");
            preview.innerHTML = "";
            const file = this.files[0];
            if (!file) return;
            const allowed = ["pdf", "png", "jpg", "jpeg", "gif"];
            const ext = file.name.split('.').pop().toLowerCase();
            if (!allowed.includes(ext)) {
                alert("Unsupported file type. Please select PDF or an image.");
                this.value = "";
                return;
            }
            if (["png", "jpg", "jpeg", "gif"].includes(ext)) {
                const reader = new FileReader();
                reader.onload = e => {
                    const img = document.createElement("img");
                    img.src = e.target.result;
                    img.className = "preview-thumb";
                    img.onclick = () => window.open(img.src, "_blank");
                    preview.appendChild(img);
                };
                reader.readAsDataURL(file);
            } else {
                const nameDiv = document.createElement("div");
                nameDiv.textContent = file.name;
                nameDiv.className = "preview-filename";
                preview.appendChild(nameDiv);
            }
        });

        document.getElementById("messageForm").addEventListener("submit", function (e) {
            e.preventDefault();
            cancelActiveEdits();
            const content = document.getElementById("contentInput").value.trim();
            const hasFile = document.getElementById("fileInput").files.length > 0;
            if (!content && !hasFile) return;
            const data = new FormData(this);
            fetch(this.action, { method: 'POST', body: data })
                .catch(err => console.error("SendMessage error:", err));
            document.getElementById("contentInput").value = "";
            document.getElementById("fileInput").value = "";
            document.getElementById("filePreview").innerHTML = "";
        });

        connection.on("UpdateConversations", () => {
            if (typeof updateConversations === "function") updateConversations();
        });

        function cancelActiveEdits() {
            document.querySelectorAll(".message-wrapper input[type='text']").forEach(input => {
                const pd = input.parentElement;
                pd.innerText = pd.dataset.originalText || input.value;
            });
        }

        document.getElementById("messageList").addEventListener("click", function (e) {
            const t = e.target, wrap = t.closest(".message-wrapper");
            if (!wrap) return;
            const msgId = +wrap.dataset.messageId;

            if (t.classList.contains("delete-icon")) {
                pendingDeleteMessageId = msgId;
                document.getElementById("confirmModal").style.display = "flex";
            }
            if (t.classList.contains("edit-icon")) {
                const md = wrap.querySelector(".message");
                const orig = md.innerText;
                if (md.querySelector("input")) return;
                const inp = document.createElement("input");
                inp.type = "text"; inp.value = orig; inp.style.width = "80%";
                md.dataset.originalText = orig; md.innerHTML = ""; md.appendChild(inp); inp.focus();
                let saved = false;
                function save() {
                    const v = inp.value.trim();
                    if (!v || v === orig) return cancel();
                    saved = true; inp.removeEventListener("blur", blur);
                    connection.invoke("EditMessage", msgId, v).catch(console.error);
                }
                function cancel() { md.innerText = orig; }
                function blur() { setTimeout(() => !saved && cancel(), 300); }
                inp.addEventListener("keydown", e => {
                    if (e.key === "Enter") { e.preventDefault(); save(); inp.blur(); }
                    if (e.key === "Escape") { e.preventDefault(); cancel(); }
                });
                inp.addEventListener("blur", blur);
                const ok = document.createElement("i"), no = document.createElement("i");
                ok.className = "fas fa-check"; ok.title = "Save"; ok.style.cursor = "pointer";
                no.className = "fas fa-times"; no.title = "Cancel"; no.style.cursor = "pointer";
                md.appendChild(ok); md.appendChild(no);
                ok.addEventListener("click", save);
                no.addEventListener("click", cancel);
            }
        });

        document.getElementById("confirmDeleteBtn").addEventListener("click", () => {
            if (pendingDeleteMessageId != null) {
                connection.invoke("DeleteMessage", pendingDeleteMessageId).catch(console.error);
                document.getElementById("confirmModal").style.display = "none";
                pendingDeleteMessageId = null;
            }
        });
        document.getElementById("cancelDeleteBtn").addEventListener("click", () => {
            document.getElementById("confirmModal").style.display = "none";
            pendingDeleteMessageId = null;
        });

        connection.on("MessageRead", (id, rt) => {
            document.querySelectorAll(".read-receipt").forEach(el => el.remove());
            const w = document.querySelector(`[data-message-id='${id}']`);
            if (w?.classList.contains("sent")) {
                const sm = w.querySelector(".sent-message");
                const rc = document.createElement("div");
                rc.className = "read-receipt"; rc.innerText = `Read ${rt}`;
                sm.parentNode.insertBefore(rc, sm.nextSibling);
            }
        });

                          connection.on("MessageEdited", (id, newC, ts) => {
            const w = document.querySelector(`[data-message-id='${id}']`);
            if (!w) return;

            const body = w.querySelector(".message");
            if (!body) return;

            // Preserve any attachment block
            const attachment = body.querySelector(".attachment");
            body.innerHTML = "";
            const textNode = document.createTextNode(newC);
            body.appendChild(textNode);
            if (attachment) body.appendChild(attachment);

            // Update header timestamp + edited label
            const info = w.querySelector(".message-info");
            if (info) {
                const nameOnly = info.innerText.split("-")[0].trim();
                info.innerHTML = `${nameOnly} - ${ts} <span class="edited-label">(edited)</span>`;
            }
        });

        connection.on("MessageDeleted", (id) => {
            const w = document.querySelector(`[data-message-id='${id}']`);
            if (w) {
                const ie = w.querySelector(".message-info");
                let sn = ie ? ie.innerText.split("-")[0].trim() : "User";
                w.innerHTML = `<div class="deleted-message">${sn} deleted a message</div>`;
            }
        });

        document.addEventListener("DOMContentLoaded", () => {
            document.querySelectorAll(".message-wrapper").forEach(w => {
                w.addEventListener("click", e => {
                    if (e.target.closest(".message-actions")) return;
                    document.querySelectorAll(".message-wrapper.show-actions")
                        .forEach(x => x !== w && x.classList.remove("show-actions"));
                    w.classList.toggle("show-actions");
                });
            });
        });

        window.addEventListener("focus", () => {
            connection.invoke("MarkMessagesAsRead", @loggedInUserId, @conversationId)
                .catch(console.error);
        });

        const ta = document.getElementById("contentInput");
        ta.addEventListener("input", function () {
            this.style.height = "auto";
            this.style.height = this.scrollHeight + "px";
            const lh = parseFloat(getComputedStyle(this).lineHeight);
            this.style.overflowY = this.scrollHeight > lh * 4 ? "auto" : "hidden";
        });
        document.addEventListener("DOMContentLoaded", () => {
            const t1 = document.getElementById("contentInput");
            t1.addEventListener("keydown", e => {
                if (e.key === "Enter" && !e.shiftKey) {
                    e.preventDefault();
                    document.getElementById("messageForm")
                        .dispatchEvent(new Event("submit", { cancelable: true }));
                }
            });
        });
    </script>


    <script>
        (function () {
          const desktopSidebar = document.getElementById('desktopConversationList');
          const drawerBody = document.getElementById('convoDrawerBody');
          const listRoot = document.getElementById('conversationListRoot');
          if (!desktopSidebar || !drawerBody || !listRoot) return;

          const mm = window.matchMedia('(max-width: 800px)');

          function move(isMobile) {
            if (isMobile) {
              if (!drawerBody.contains(listRoot)) drawerBody.appendChild(listRoot);
            } else {
              if (!desktopSidebar.contains(listRoot)) desktopSidebar.appendChild(listRoot);
            }
          }

          // Initial placement after DOM is ready
          if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => move(mm.matches));
          } else {
            move(mm.matches);
          }

          // React to viewport changes
          const onChange = (e) => move(e.matches);
          if (mm.addEventListener) mm.addEventListener('change', onChange);
          else mm.addListener(onChange);
        })();
    </script>

}
