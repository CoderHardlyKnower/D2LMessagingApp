@model IEnumerable<MessagingApp.Models.Message>
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    var userNames = ViewBag.UserNames as Dictionary<int, string>;
    int loggedInUserId = int.Parse(User.FindFirst("UserId").Value);
    string loggedInUserName = User.Identity.Name;
    string studentName = ViewBag.StudentName as string;
    int conversationId = (int)ViewBag.ConversationId;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>Messaging - MessagingApp</title>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <!-- SignalR client library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
    <!-- FontAwesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
</head>
<body>
    <div class="message-container">
        <h1>Messaging with @studentName</h1>
        <div class="message-list" id="messageList">
            @if (Model != null && Model.Any())
            {
                foreach (var message in Model)
                {
                    bool isSentByUser = message.SenderId == loggedInUserId;
                    <div class="message-wrapper @(isSentByUser ? "sent" : "received")" data-message-id="@message.Id">
                        <div class="message-header">
                            <small class="message-info">
                                @(userNames.ContainsKey(message.SenderId) ? userNames[message.SenderId] : "Unknown")
                                - @message.Timestamp.ToShortTimeString()
                            </small>
                            @if (isSentByUser)
                            {
                                <div class="message-actions">
                                    <i class="fas fa-edit edit-icon" title="Edit"></i>
                                    <i class="fas fa-trash delete-icon" title="Delete"></i>
                                </div>
                            }
                        </div>
                        <div class="message @(isSentByUser ? "sent-message" : "received-message")">
                            @message.Content
                        </div>
                    </div>
                }
            }
            else
            {
                <p>No messages available.</p>
            }
        </div>
        <form class="add-message-form" id="messageForm" method="post" asp-action="AddMessage" asp-controller="Messaging">
            @Html.AntiForgeryToken()
            <input type="hidden" name="studentId" value="@ViewBag.StudentId" />
            <input type="hidden" name="studentName" value="@studentName" />
            <input type="hidden" name="conversationId" value="@conversationId" />
            <input type="text" name="content" id="contentInput" placeholder="Type your message here..." required />
            <button type="submit">Send</button>
        </form>
    </div>

    <script>
        // Auto-scroll on page load
        document.addEventListener("DOMContentLoaded", function () {
            var messageList = document.getElementById("messageList");
            messageList.scrollTop = messageList.scrollHeight;
        });

        // Initialize SignalR connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub")
            .build();

        connection.start().then(() => {
            console.log("Connected to SignalR hub.");
        }).catch(err => console.error("SignalR Connection Error: ", err.toString()));

        // Handle receiving a new message from the SignalR hub
        connection.on("ReceiveMessage", (senderId, senderName, message, timestamp, messageId) => {
            const messageList = document.getElementById("messageList");
            const isSentByUser = senderId == @loggedInUserId;
            const wrapper = document.createElement("div");
            wrapper.className = "message-wrapper " + (isSentByUser ? "sent" : "received");
            // Set the message ID for future edit/delete actions
            wrapper.setAttribute("data-message-id", messageId);

            // Create header container for sender info
            const headerDiv = document.createElement("div");
            headerDiv.className = "message-header";
            const infoEl = document.createElement("small");
            infoEl.className = "message-info";
            infoEl.innerText = senderName + " - " + timestamp;
            headerDiv.appendChild(infoEl);
            if (isSentByUser) {
                const actionsDiv = document.createElement("div");
                actionsDiv.className = "message-actions";
                actionsDiv.innerHTML = '<i class="fas fa-edit edit-icon" title="Edit"></i><i class="fas fa-trash delete-icon" title="Delete"></i>';
                headerDiv.appendChild(actionsDiv);
            }
            wrapper.appendChild(headerDiv);

            // Create the message text element
            const messageEl = document.createElement("div");
            messageEl.className = "message " + (isSentByUser ? "sent-message" : "received-message");
            messageEl.innerText = message;
            wrapper.appendChild(messageEl);

            messageList.appendChild(wrapper);
            messageList.scrollTop = messageList.scrollHeight;
        });

        // Intercept form submission to send message via SignalR
        document.getElementById("messageForm").addEventListener("submit", function (event) {
            event.preventDefault();
            const contentInput = document.getElementById("contentInput");
            if (contentInput.value.trim() === "") return;
            const convId = parseInt(document.querySelector('input[name="conversationId"]').value, 10);
            connection.invoke("SendMessage", @loggedInUserId, "@loggedInUserName", contentInput.value, convId)
                .catch(err => console.error(err.toString()));
            contentInput.value = "";
        });

        // Delegate events for edit and delete actions on messages
        document.getElementById("messageList").addEventListener("click", function (event) {
            const target = event.target;
            const wrapper = target.closest(".message-wrapper");
            if (!wrapper) return;
            const messageId = parseInt(wrapper.getAttribute("data-message-id"), 10);

            // Delete message event
            if (target.classList.contains("delete-icon")) {
                if (confirm("Are you sure you want to delete this message?")) {
                    connection.invoke("DeleteMessage", messageId)
                        .catch(err => console.error(err.toString()));
                }
            }

            // Edit message event
            if (target.classList.contains("edit-icon")) {
                const messageDiv = wrapper.querySelector(".message");
                const originalText = messageDiv.innerText;
                const input = document.createElement("input");
                input.type = "text";
                input.value = originalText;
                input.style.width = "80%";
                messageDiv.innerHTML = "";
                messageDiv.appendChild(input);
                input.focus();

                // Create save and cancel icons
                const saveIcon = document.createElement("i");
                saveIcon.className = "fas fa-check";
                saveIcon.style.cursor = "pointer";
                saveIcon.title = "Save";
                const cancelIcon = document.createElement("i");
                cancelIcon.className = "fas fa-times";
                cancelIcon.style.cursor = "pointer";
                cancelIcon.title = "Cancel";
                messageDiv.appendChild(saveIcon);
                messageDiv.appendChild(cancelIcon);

                // Save edited message event
                saveIcon.addEventListener("click", function () {
                    const newContent = input.value.trim();
                    if (newContent === "") {
                        alert("Message cannot be empty.");
                        return;
                    }
                    connection.invoke("EditMessage", messageId, newContent)
                        .catch(err => console.error(err.toString()));
                });
                // Cancel editing: restore original text
                cancelIcon.addEventListener("click", function () {
                    messageDiv.innerText = originalText;
                });
            }
        });

        // Handle MessageEdited event from the hub
        connection.on("MessageEdited", (messageId, newContent, timestamp) => {
            const wrapper = document.querySelector(`.message-wrapper[data-message-id='${messageId}']`);
            if (wrapper) {
                const messageDiv = wrapper.querySelector(".message");
                messageDiv.innerText = newContent;
                const infoEl = wrapper.querySelector(".message-info");
                infoEl.innerHTML = infoEl.innerHTML.split("-")[0] + "- " + timestamp + ' <span class="edited-label">(edited)</span>';
            }
        });

        // Handle MessageDeleted event from the hub
        connection.on("MessageDeleted", (messageId) => {
            const wrapper = document.querySelector(`.message-wrapper[data-message-id='${messageId}']`);
            if (wrapper) {
                wrapper.remove();
            }
        });
    </script>
</body>
</html>
