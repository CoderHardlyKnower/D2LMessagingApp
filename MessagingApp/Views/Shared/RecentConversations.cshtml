@* Style *@
<style>
    .chat-widget {
        position: fixed;
        bottom: 65px;
        right: 55px;
        width: 70px;
        height: 70px;
        background-color: #d3d3d3;
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .chat-widget:hover {
        background-color: #a9a9a9;
    }

    .chat-img {
        object-fit: contain;
        width: 30px;
        height: 30px;
    }

    /* Global unread badge */
    .global-badge {
        position: absolute;
        top: 0;
        right: 0;
        transform: translate(50%, -50%);
        font-size: 0.75rem;
        display: none;
    }

    .chat-window {
        display: none;
        width: 400px;
        max-width: 95vw;
        height: auto;
        max-height: 400px;
        background-color: white;
        position: absolute;
        bottom: 40px;
        right: 15px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        border-radius: 15px;
        z-index: 100;
        overflow: hidden;
    }

    .chat-window-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        height: fit-content;
        padding: 5px 15px;
    }

    .icons {
        display: flex;
        align-items: center;
    }

    .icons > * {
        cursor: pointer;
    }

    .conversation {
        background-color: white;
        cursor: pointer;
        padding: 10px;
        border-top: 1px solid black;
        border-bottom: 1px solid black;
    }

    .conversation:hover {
        background-color: #d3d3d3;
        color: black;
    }

    .conversation p {
        max-width: 380px;
        max-height: 50px;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .active-chats {
        max-height: 260px; 
        overflow-y: auto;
    }

    a {
        text-decoration: none;
        color: black;
    }

    @@media (max-width: 500px) {
        .chat-window {
            width: 90vw;
            right: 5vw;
        }

        .conversation p {
            max-width: 100%;
        }
    }
</style>

@* Chat widget with a global unread badge *@
<div title="View Recent Conversations" style="position: relative;">
    <div class="chat-widget" onclick="getRecentConversations()">
        <img src="~/images/chat.png" class="chat-img" />
        <span id="globalUnreadBadge" class="badge bg-danger rounded-circle global-badge">0</span>
    </div>
</div>

@* Chat window *@
<div class="chat-window" style="display:none;">
    <div class="chat-window-header flex">
        <h4>Recent Conversations</h4>
        <div class="icons">
            <i class="bi bi-x fs-1 mx-lg-1" onclick="hideChatWindow()"></i>
        </div>
    </div>

    <div class="active-chats"></div>
</div>

<script>
    // ------------------- UI helpers -------------------
    function hideChatWindow() {
        const chatWindow = document.querySelector(".chat-window");
        const chatWidget = document.querySelector(".chat-widget");
        chatWindow.style.display = "none";
        chatWidget.style.display = "flex";
    }

    async function getRecentConversations() {
        const chatWindow = document.querySelector(".chat-window");
        const activeChatsDiv = document.querySelector(".active-chats");
        const chatWidget = document.querySelector(".chat-widget");

        chatWidget.style.display = "none";
        chatWindow.style.display = "block";
        activeChatsDiv.innerHTML = "";

        const recentConversations = await fetchRecentConversations();
        updateGlobalUnreadBadge(recentConversations);
         if (recentConversations.length !== 0) {
        recentConversations.forEach(conversation => {
            const timestamp = conversation.lastMessageTimestamp;
            const date = new Date(timestamp);
            const time = date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });

            const badge = conversation.missedCount > 0
                ? `<span class="badge bg-danger ms-2">${conversation.missedCount}</span>`
                : "";

            // New: paperclip for file-only
            const clip = conversation.isFileOnly ? `<i class="fas fa-paperclip me-1"></i>` : "";

            // Keep bolding when unread, and show nothing if no text for file-only
            const rawText = conversation.lastMessage ?? "";
            const textWithIcon = conversation.isFileOnly ? `${clip}Attachment` : `${rawText}`;
            const messageText = conversation.missedCount > 0
                ? `<b>${textWithIcon}</b>`
                : textWithIcon;

            const content = `
                <a href="/Messaging/Index?studentId=${conversation.student.userId}&studentName=${encodeURIComponent(conversation.student.name)}">
                    <div class="conversation">
                        <div class="d-flex justify-content-between align-items-center">
                            <h4>${conversation.student.name}${badge}</h4>
                            <span>${time}</span>
                        </div>
                        <p>${messageText}</p>
                    </div>
                </a>
            `;
            activeChatsDiv.insertAdjacentHTML("beforeend", content);
        });
    } else {
        activeChatsDiv.innerHTML = `<div class="text-center mt-2">No Conversations</div>`;
    }

    }

    function updateGlobalUnreadBadge(recentConversations) {
        let totalMissed = 0;
        for (const c of recentConversations) totalMissed += (c.missedCount || 0);
        const badgeEl = document.getElementById("globalUnreadBadge");
        if (totalMissed > 0) {
            badgeEl.innerText = totalMissed;
            badgeEl.style.display = "block";
        } else {
            badgeEl.style.display = "none";
        }
    }

    async function fetchRecentConversations() {
        try {
            const res = await fetch('/Messaging/GetRecentConversations');
            if (!res.ok) throw new Error("Couldn't get recent conversations");
            return await res.json();
        } catch (e) {
            console.error(e);
            return [];
        }
    }

    async function pollGlobalUnreadBadge() {
        const recentConversations = await fetchRecentConversations();
        updateGlobalUnreadBadge(recentConversations);

        // If the window is open, refresh the list too
        const chatWindow = document.querySelector(".chat-window");
        if (chatWindow && chatWindow.style.display !== "none") {
            const activeChatsDiv = document.querySelector(".active-chats");
            activeChatsDiv.innerHTML = "";
            recentConversations.forEach(conversation => {
                const date = new Date(conversation.lastMessageTimestamp);
                const time = date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });

                const badge = conversation.missedCount > 0
                    ? `<span class="badge bg-danger ms-2">${conversation.missedCount}</span>` : "";
                const messageText = conversation.missedCount > 0
                    ? `<b>${conversation.lastMessage ?? ""}</b>`
                    : (conversation.lastMessage ?? "");

                const content = `
                    <a href="/Messaging/Index?studentId=${conversation.student.userId}&studentName=${encodeURIComponent(conversation.student.name)}">
                        <div class="conversation">
                            <div class="d-flex justify-content-between align-items-center">
                                <h4>${conversation.student.name}${badge}</h4>
                                <span>${time}</span>
                            </div>
                            <p>${messageText}</p>
                        </div>
                    </a>`;
                activeChatsDiv.insertAdjacentHTML("beforeend", content);
            });
        }
    }

    (function ensureSignalRAndWire() {
        if (window.__globalChatWidgetWired) return;
        window.__globalChatWidgetWired = true;

        function wireHandlers(conn) {
            // Throttle refresh bursts to once per ~800ms
            let last = 0, queued = false;
            const throttledRefresh = async () => {
                const now = Date.now();
                if (now - last > 800) {
                    last = now;
                    await pollGlobalUnreadBadge();
                } else if (!queued) {
                    queued = true;
                    setTimeout(async () => { queued = false; last = Date.now(); await pollGlobalUnreadBadge(); }, 820);
                }
            };

            // The server calls this on new messages / edits / read receipts
            conn.on("UpdateConversations", throttledRefresh);
        }

        async function startConnection() {
            try {
                if (!window.globalHubConnection) {
                    window.globalHubConnection = new signalR.HubConnectionBuilder()
                        .withUrl("/chatHub")
                        .withAutomaticReconnect()
                        .build();
                    wireHandlers(window.globalHubConnection);
                }
                if (window.globalHubConnection.state === "Disconnected") {
                    await window.globalHubConnection.start();
                }
            } catch (err) {
                console.error("SignalR start failed; polling will cover:", err);
            }
        }

        // Load SignalR script if missing, then start the connection
        function loadSignalRIfNeeded(cb) {
            if (typeof signalR !== "undefined") { cb(); return; }
            const s = document.createElement("script");
            s.src = "https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js";
            s.onload = cb;
            s.onerror = () => console.warn("Failed to load SignalR; fallback to polling only.");
            document.head.appendChild(s);
        }

        loadSignalRIfNeeded(startConnection);
    })();

    // fallback
    setInterval(pollGlobalUnreadBadge, 30000);
    pollGlobalUnreadBadge();
</script>
