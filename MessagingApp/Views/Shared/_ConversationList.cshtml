@* Partial View: _ConversationList *@
@* Displays Active Conversations on the Left Side of Messaging Screen *@

<style>
    .conversation-list-container {
        width: 300px;
        position: fixed;
        top: 87px; /* Adjust if your header is taller */
        bottom: 60px; /* Keeps it flush with the footer */
        left: 15px;
        padding: 15px;
        border-right: 1px solid #ddd;
        overflow-y: auto;
        background: #ffffff;
        display: flex;
        flex-direction: column;
        z-index: 1000;
        overflow-y: auto;
    }

    /* Instead of switching at 1009px, switch at 1050px to prevent weird width issues */
    @@media (max-width: 1050px) {
        .conversation-list-container {
            position: relative;
            width: 100%; /* Take full width to prevent squishing */
            top: 0;
            left: 0;
            bottom: auto;
            border-right: none;
            margin: 0 auto 20px auto; /* Even margins */
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);

        }
    }

    /* Keep the look consistent for smaller screens */
    @@media (max-width: 750px) {
        .conversation-list-container {
            padding: 10px;
            width: calc(100% - 30px);
        }
    }


    /* Conversation list should take up remaining space */
    .conversation-list {
        flex-grow: 1;
        overflow-y: auto;
    }

    /* Conversation item */
    .conversation-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        border-bottom: 1px solid #eee;
        cursor: pointer;
        transition: background 0.2s;
    }

        .conversation-item:hover {
            background: #f5f5f5;
        }

        /* Unread messages styling */
        .conversation-item.unread {
            font-weight: bold;
        }

    /* Notification badge */
    .badge-unread {
        background: red;
        color: white;
        padding: 4px 8px;
        border-radius: 50%;
        font-size: 12px;
    }
</style>

<div class="conversation-list-container">
    <h4>Active Conversations</h4>
    <div id="conversationList" class="conversation-list">
        <p>Loading conversations...</p>
    </div>
</div>


<script>
    // Fetch active conversations
    async function fetchActiveConversations() {
        try {
            const response = await fetch('/Messaging/GetRecentConversations');
            if (!response.ok) throw new Error("Couldn't fetch conversations.");
            const conversations = await response.json();

            const conversationList = document.getElementById("conversationList");
            conversationList.innerHTML = ""; // Clear previous list

            if (conversations.length === 0) {
                conversationList.innerHTML = "<p>No active conversations</p>";
                return;
            }

            conversations.forEach(conv => {
                let isUnread = conv.missedCount > 0;
                let lastMessage = isUnread ? `<b>${conv.lastMessage}</b>` : conv.lastMessage;
                let badge = isUnread ? `<span class="badge-unread">${conv.missedCount}</span>` : "";

                let conversationHtml = `
                        <div class="conversation-item ${isUnread ? 'unread' : ''}" onclick="window.location.href='/Messaging/Index?conversationId=${conv.conversationId}'">
                            <span>${conv.student.name}</span>
                            ${badge}
                        </div>
                    `;

                conversationList.innerHTML += conversationHtml;
            });
        } catch (error) {
            console.error(error);
        }
    }

    // Real-time SignalR update function
    function updateConversationList(conversationId, senderName, lastMessage, unreadCount) {
        let conversationItems = document.querySelectorAll('.conversation-item');
        let found = false;

        conversationItems.forEach(item => {
            if (item.getAttribute('onclick').includes(`conversationId=${conversationId}`)) {
                item.classList.add('unread');
                item.innerHTML = `<span>${senderName}</span> <span class="badge-unread">${unreadCount}</span>`;
                found = true;
            }
        });

        // If conversation does not exist, add it
        if (!found) {
            let newConversation = `
                    <div class="conversation-item unread" onclick="window.location.href='/Messaging/Index?conversationId=${conversationId}'">
                        <span>${senderName}</span> <span class="badge-unread">${unreadCount}</span>
                    </div>
                `;
            document.getElementById("conversationList").innerHTML += newConversation;
        }
    }

    // Fetch conversations initially and every 30 seconds
    fetchActiveConversations();
    setInterval(fetchActiveConversations, 30000);

    // Listen for real-time updates
    connection.on("UpdateConversationList", updateConversationList);
</script>
