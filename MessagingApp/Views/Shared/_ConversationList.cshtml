@* Partial View: _ConversationList *@
@* Displays Active Conversations on the Left Side of Messaging Screen *@

<style>
   /* Default conversation list size */
.conversation-list-container {
    width: 300px;
    position: fixed;
    top: 87px;
    bottom: 60px;
    left: 20px;
    padding: 15px;
    border-right: 1px solid #ddd;
    overflow-y: auto;
    background: #ffffff;
    display: flex;
    flex-direction: column;
    z-index: 1000;
}

/* Shrinking for smaller screens */
@@media (max-width: 1050px) {
    .conversation-list-container {
        width: 220px;
    }
}

@@media (max-width: 900px) {
    .conversation-list-container {
        width: 180px;
    }
}

/* Stacking layout on small screens */
@@media (max-width: 750px) {
    .conversation-list-container {
        width: 100%;
        position: relative;
        left: 0;
        top: 0;
        margin-bottom: 10px;
    }

    .message-container {
        margin-left: 0;
        width: 100%;
        max-width: 100%;
    }
}

/* Scrollable conversation list */
.conversation-list {
    flex-grow: 1;
    overflow-y: auto;
}

/* Individual conversation items */
.conversation {
    display: flex;
    flex-direction: column;
    padding: 12px;
    border-bottom: 1px solid #eee;
    transition: background-color 0.2s, box-shadow 0.2s;
    position: relative;
    text-decoration: none;
    color: inherit;
}

/* Hover effect */
.conversation:hover {
    background: #f5f5f5;
}

/* Unread messages - making them stand out */
.conversation.unread {
    font-weight: bold;
    background-color: #e8f3ff !important; /* Subtle blue background */
    border-left: 4px solid #007bff; /* Blue highlight */
}

/* Header (Name + Timestamp) */
.conversation-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

/* Conversation name */
.conversation h4 {
    font-size: 14px;
    margin: 0;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    color: black;
}

/* Last message preview */
.conversation p {
    font-size: 12px;
    margin: 0;
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    color: #666;
}

/* Timestamp */
.conversation .timestamp {
    font-size: 12px;
    color: #888;
}
    /* Notification Badge - properly positioned */
    .badge-unread {
        background: red;
        color: white;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: bold;
        display: inline-block;
        margin-top: 5px; /* Adds space between last message and badge */
        align-self: flex-start; /* Ensures it doesn't stretch */
    }

/* Ensure badge only appears when unread messages exist */
.conversation.unread .badge-unread {
    display: inline-block;
}

.conversation:not(.unread) .badge-unread {
    display: none;
}

</style>

<div class="conversation-list-container">
    <h4>Your Conversations</h4>
    <div id="conversationList" class="conversation-list">
        <p>Loading conversations...</p>
    </div>
</div>

<script>
    // Get the current conversationId from the view
    var currentConversationId = '@(ViewBag.ConversationId ?? 0)';

    // Fetch recent conversations
    async function fetchActiveConversations() {
        try {
            let url = '/Messaging/GetRecentConversations';
            if (currentConversationId && currentConversationId != '0') {
                url += '?excludeConversationId=' + currentConversationId;
            }
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error("Couldn't get recent conversations");
            }
            const data = await response.json();
            return data;
        } catch (error) {
            console.error(error);
            return [];
        }
    }
    // Render the conversation list
    function renderConversations(conversations) {
        const conversationList = document.getElementById("conversationList");
        conversationList.innerHTML = ""; // Clear previous content

        if (conversations.length === 0) {
            conversationList.innerHTML = "<p>No active conversations</p>";
            return;
        }

        conversations.forEach(conversation => {
            // If this conversation is the current one, force its unread count to 0.
            if (conversation.conversationId == currentConversationId) {
                conversation.missedCount = 0;
            }

            const date = new Date(conversation.lastMessageTimestamp);
            const time = date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit' });

            // Prepare red badge if there are missed messages.
            var badge = "";
            if (conversation.missedCount > 0) {
                badge = `<span class="badge bg-danger">${conversation.missedCount}</span>`;
            }

            // Bold the last message if there are missed messages
            var messageText = conversation.missedCount > 0 ? `<b>${conversation.lastMessage}</b>` : conversation.lastMessage;

            // Unread class if there are missed messages
            var unreadClass = conversation.missedCount > 0 ? " unread" : "";

            var conversationHtml = `
                <a href="/Messaging/Index?studentId=${conversation.student.userId}&studentName=${encodeURIComponent(conversation.student.name)}&conversationId=${conversation.conversationId}" class="conversation ${unreadClass}">
                    <div class="conversation-header">
                        <h4>${conversation.student.name}</h4>
                        <span class="timestamp">${time}</span>
                    </div>
                    <p>${messageText}</p>
                    <div class="badge-container">${badge}</div>
                </a>
            `;
            conversationList.innerHTML += conversationHtml;
        });
    }

    async function updateConversations() {
        const conversations = await fetchActiveConversations();
        renderConversations(conversations);
    }

    // Initial load of conversations.
    updateConversations();

    // Refresh conversation list every 30 seconds.
    setInterval(updateConversations, 30000);
</script>
